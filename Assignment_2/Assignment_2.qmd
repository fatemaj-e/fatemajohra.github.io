---
title: "EPPS 6356: Assignment 1"
author: "Fatema Johra"
date: "`r Sys.Date()`"
html-math-method:
  method: mathjax
format: html
editor: 
  markdown: 
    wrap: 72
---
## Happy Planet data
```{r, warning=FALSE, message=FALSE}
# Load the package
library(readxl)

# Load Happy Planet Index dataset
hpi <- read_excel("HPI_2024.xlsx", sheet = "1. All countries", skip = 8)

# Take a quick look
library(dplyr)

# Remove extra unnamed column if exists
hpi_clean <- hpi %>% select(-starts_with("..."))
# use janitor to clean data
# Rename columns for convenience
colnames(hpi_clean) <- c("HPI_rank", "Country", "ISO", "Continent", "Population",
                         "Life_Expectancy", "Wellbeing", "Carbon_Footprint", 
                         "HPI", "CO2_threshold", "GDP_per_capita")

# Convert numeric columns to numeric type
hpi_clean <- hpi_clean %>%
  mutate(
    HPI_rank = as.numeric(HPI_rank),
    Population = as.numeric(Population),
    Life_Expectancy = as.numeric(Life_Expectancy),
    Wellbeing = as.numeric(Wellbeing),
    Carbon_Footprint = as.numeric(Carbon_Footprint),
    HPI = as.numeric(HPI),
    CO2_threshold = as.numeric(CO2_threshold),
    GDP_per_capita = as.numeric(GDP_per_capita)
  )

# Remove rows with missing values
hpi_clean <- hpi_clean %>% filter(!is.na(HPI))


## Start plotting from basics 
# Note the order
plot(hpi_clean$HPI, hpi_clean$Life_Expectancy, pch=17)  # Can you change pch?
text(13, 80, "HPI vs Life Expectancy")
# Scatterplot
# Note the incremental additions
# Example: Life Expectancy on x-axis
x <- hpi_clean$Life_Expectancy
y1 <- hpi_clean$HPI
y2 <- hpi_clean$Carbon_Footprint

# Setting label orientation, margins c(bottom, left, top, right) & text size
par(las=1, mar=c(4, 4, 2, 4), cex=1) 
plot.new()
plot.window(range(x), c(0, max(y1, na.rm=TRUE))) # Left axis for HPI
lines(x, y1, col="blue")
points(x, y1, pch=16, col="blue", cex=1.5)

# Add right axis for Carbon Footprint
par(new=TRUE)
plot.window(range(x), c(0, max(y2, na.rm=TRUE))) # Right axis for Carbon Footprint
lines(x, y2, col="red")
points(x, y2, pch=21, bg="white", col="red", cex=1.5)

# Axes and labels
axis(1)  # x-axis: Life Expectancy
axis(2)  # y-axis left: HPI
axis(4)  # y-axis right: Carbon Footprint
box(bty="u")
mtext("Life Expectancy (years)", side=1, line=2)
mtext("Happy Planet Index", side=2, line=2)
mtext("Carbon Footprint (tCO2e)", side=4, line=2)
text(75, 55, "Example: HPI vs Life Expectancy & Carbon Footprint")

# Histogram
Y <- hpi_clean$HPI
# Make sure no Y exceed [-3.5, 3.5]
Y[Y < 30 | Y > 60] <- NA # Selection/set range
x <- seq(30, 60, 0.5)  # for density line
dn <- dnorm(x, mean=mean(Y, na.rm=TRUE), sd=sd(Y, na.rm=TRUE))  # normal curve based on HPI

# Set margins
par(mar=c(4.5, 4.1, 3.1, 0))

# Plot histogram
hist(Y, breaks=seq(30, 60, 1), ylim=c(0, 0.12), 
     col="skyblue", freq=FALSE, 
     xlab="Happy Planet Index", main="Distribution of HPI")

# Add normal density line
lines(x, dn, lwd=2, col="blue")

# Reset margins
par(mar=c(5.1, 4.1, 4.1, 2.1))

# Barplot
library(dplyr)
library(tidyr)
# Step 1: Create HPI tiers
hpi_clean <- hpi_clean %>%
  mutate(HPI_tier = case_when(
    HPI < 45 ~ "Low",
    HPI <= 55 ~ "Medium",
    TRUE ~ "High"
  ))

# Step 2: Aggregate counts per continent per tier
hpi_bar <- hpi_clean %>%
  group_by(Continent, HPI_tier) %>%
  summarise(Count = n(), .groups = "drop") %>%
  pivot_wider(names_from = HPI_tier, values_from = Count, values_fill = 0)

# Transpose the matrix
hpi_matrix_t <- t(as.matrix(hpi_bar[, c("Low","Medium","High")]))
colnames(hpi_matrix_t) <- paste("Continent", hpi_bar$Continent)

# Define colors
tier_colors <- c("#A8D5BA", "#FFDCA8", "#FFB3BA")  # Low, Medium, High

# Stacked barplot
barplot(
  hpi_matrix_t,
  col = tier_colors,
  names.arg = colnames(hpi_matrix_t),
  ylim = c(0, max(colSums(hpi_matrix_t)) * 1.1),
  main = "HPI Distribution by Continent",
  ylab = "Number of Countries"
)

# Add counts inside bars
midpts <- barplot(hpi_matrix_t, plot=FALSE)  # Get bar midpoints
text(rep(midpts, each=nrow(hpi_matrix_t)), 
     apply(hpi_matrix_t, 2, cumsum) - hpi_matrix_t/2,
     labels = as.vector(hpi_matrix_t),
     col = "black", cex = 0.8)
# Add legend for tiers
legend(
  "topright",                     # position
  legend = c("Low", "Medium", "High"),
  fill = tier_colors,
  title = "HPI Tier"
)

# reset margins to default
par(mar=c(5.1,4.1,4.1,2.1))


# Boxplot

library(ggplot2)

# Boxplot of HPI by Continent
ggplot(hpi_clean, aes(x = factor(Continent), y = HPI)) +
  geom_boxplot(fill = "skyblue", color = "darkblue") +
  labs(
    x = "Continent",
    y = "Happy Planet Index (HPI)",
    title = "Distribution of HPI by Continent"
  ) +
  theme_minimal()


# Reset margins
par(mar=c(5.1, 4.1, 4.1, 2.1))


# Persp
library(akima)

# Interpolate HPI values onto a grid using all 147 data points
interp_data <- with(hpi_clean, interp(
  x = Life_Expectancy,
  y = Carbon_Footprint,
  z = HPI,
  nx = 50, ny = 50,   # finer grid for smoother surface
  duplicate = "mean"  # use mean if multiple points fall on the same grid
))

# Draw the 3D surface
par(mar = c(0, 0.5, 0, 0), lwd = 0.5)
p <- persp(interp_data$x, interp_data$y, interp_data$z,
           theta = 30, phi = 30, expand = 0.6,
           col = "lightblue", shade = 0.5,
           xlab = "Life Expectancy",
           ylab = "Carbon Footprint",
           zlab = "HPI",
           ticktype = "detailed")
par(mar = c(5.1, 4.1, 4.1, 2.1), lwd = 1)

# Overlay the actual 147 country points
points_3d <- trans3d(hpi_clean$Life_Expectancy,
                     hpi_clean$Carbon_Footprint,
                     hpi_clean$HPI,
                     p)
points(points_3d, col = "red", pch = 19)

# Piechart
# Count countries per continent
continent_counts <- table(hpi$Continent)

# Assign proper continent names
continent_names <- c("Africa", "Asia", "Europe", "North America", 
                     "Oceania", "South America", "Antarctica", "Other")
names(continent_counts) <- continent_names[as.numeric(names(continent_counts))]


# Pie chart
par(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.8)
pie(continent_counts, col = rainbow(length(continent_counts)), main="Countries by Continent")

# Add legend
legend("topright", legend = names(continent_counts), fill = rainbow(length(continent_counts)), cex=0.7)
```
## Disclaimer: This code was generated and troubleshooted with the help of Chatgpt



